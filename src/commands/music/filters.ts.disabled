import { Command, CommandOption, Bot } from "../../classes/Bot";
import {ApplicationCommandOptionType, CommandInteraction} from "discord.js";
import { validateMusicUser,} from "../../classes/Music";
import strings from "../../assets/en_US.json" assert { type: "json" };
let m = strings.sets.music
let distube = Bot.distube!;
export default class extends Command {
    override async run(interaction: CommandInteraction, bot: Bot): Promise<void> {
        await interaction.deferReply();
        let filter = interaction.options.get("filter")! as never as string;
        if (!filter) {
            await interaction.editReply({ embeds: [
                    {
                        color: 0x780aff,
                        title: m.filter_embed_title,
                        description: distube.filters ? Object.keys(distube.filters).join(", ") : "No filters"
                    },
                ]})
            return;
        }

        if (!validateMusicUser(interaction, true)) return;

        let queue = distube.getQueue(interaction.guild!.id)!;
        if (Object.keys(distube.filters).includes(filter)) {
            await interaction.editReply({ embeds: [
                    {
                        color: 0x780aff,
                        description: m.filter_invalid
                    },
                ]})
            return;
        }
        await queue.filters.add(filter)
        await interaction.editReply({ embeds: [
                {
                    color: 0x780aff,
                    description: m.filter_applied
                },
            ]})
    }

    override name(): string {
        return "filters";
    }

    override description(): string {
        return "Apply or view filters";
    }

    override options(): CommandOption[] {
        return [
            {
                name: "filter",
                description: "The filter to apply (leave blank to view current filters)",
                type: ApplicationCommandOptionType.String,
                required: false,
            },
            {
                name: "off",
                description: "Turn off all filters",
                type: ApplicationCommandOptionType.Subcommand,
                required: false,
            }
        ];
    }
}
